{"version":3,"sources":["hooks.js","services/twitter.js","components/TweetInput.jsx","components/SentimentInput.jsx","components/TweetGenInput.jsx","components/Code.jsx","components/Tweet.jsx","components/TopTweet.jsx","components/WordCloud.jsx","components/BarChart.jsx","App.js","serviceWorker.js","index.js"],"names":["useForm","initialValues","useState","formValues","setFormValues","handleChange","event","value","target","type","checked","name","getInputProps","fieldName","onChange","instance","axios","create","baseURL","useStyles","makeStyles","theme","root","margin","spacing","width","BasicTextFields","props","classes","onSubmit","preventDefault","console","log","Promise","resolve","reject","max_tweets","maxTweets","query","language","lang","get","then","result","tweets","data","catch","getTweets","response","loadTweets","className","noValidate","autoComplete","TextField","id","label","Button","variant","color","sentiment","post","getSentiment","loadSentiment","multiline","rowsMax","start","length","tweet","generateTweet","loadGenerated","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","SimpleAccordion","Accordion","AccordionSummary","expandIcon","aria-controls","Typography","AccordionDetails","rel","href","style","maxWidth","src","alt","srcSet","Tweet","Grid","container","item","xs","title","at","Box","bgcolor","p","borderRadius","display","justifyContent","mt","TopTweet","screen_name","text","retweeted_count","favorite_count","resizeStyle","alignItems","options","colors","enableTooltip","deterministic","fontFamily","join","fontSizes","fontStyle","padding","rotations","rotationAngles","scale","spiral","transitionDuration","WordCloud","defaultSize","height","words","this","wordFreq","Component","rootElement","document","getElementById","ReactDOM","render","BarChart","chartRef","React","createRef","drawChart","negative","wordSentiment","neg","positive","pos","compound","neutral","neu","myChartRef","current","getContext","Chart","labels","datasets","backgroundColor","ref","App","setState","generated","state","Container","fixed","Link","top_tweets","map","i","key","word_freq","role","aria-label","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d6df3f28.chunk.js","sourcesContent":["import { useState } from 'react';\n\n/* \n\n// ----- Custom Hook useForm -----\n\n// You can use this custom Hook in a component\n\n// To initialize, you have to write the following\nconst initialValues = { carrot: \"orange\"  }\nconst { formValues, getInputProps, handleChange } = useForm(initialValues)\n\n// - formValues: an object with all the values of a from\n// - getInputProps: a function to get the props of an input\n// - handleChange: the handler function for forms (optional most of the time)\n// - initialValue: the initial for formValues\n\n// Then to insert a <input>, <textarea> or <select>, it's really easy!\n<input type=\"text\" {...getInputProps('carrot')} />\n<select {...getInputProps('lang')}>\n  <option value=\"fr\">French</option>\n  <option value=\"en\">English</option>\n</select>\n\n// Then you can access the values typed very easily:\nformValues.carrot\nformValues.lang\n\n// You can see an example in: client/src/components/pages/Login.jsx\n\n*/\nexport function useForm(initialValues = {}) {\n  const [formValues, setFormValues] = useState(initialValues);\n\n  function handleChange(event) {\n    let value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\n    setFormValues({\n      ...formValues,\n      [event.target.name]: value,\n    });\n  }\n\n  function getInputProps(fieldName) {\n    return {\n      name: fieldName,\n      value: formValues[fieldName] || '',\n      checked: formValues[fieldName] || false,\n      onChange: handleChange,\n    };\n  }\n\n  return {\n    formValues,\n    getInputProps,\n    handleChange,\n    setFormValues,\n  };\n}\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: '/api',\n});\n\nconst getTweets = (formValues) =>\n  new Promise((resolve, reject) => {\n    const max_tweets = formValues.maxTweets;\n    const query = formValues.query;\n    const language = formValues.lang;\n\n    instance\n      .get(`/tweets/?query=${query}&maxTweets=${max_tweets}&lang=${language}`)\n      .then((result) => {\n        console.log('API result', result);\n        const tweets = result.data;\n        resolve(tweets);\n      })\n      .catch(reject);\n  });\n\nconst generateTweet = (formValues) =>\n  new Promise((resolve, reject) => {\n    const start = formValues.start;\n    const length = formValues.length;\n\n    instance\n      .get(`/predict/?start=${start}&length=${length}`)\n      .then((result) => {\n        console.log('API result', result);\n        const tweet = result.data;\n        resolve(tweet);\n      })\n      .catch(reject);\n  });\n\nconst getSentiment = (formValues) =>\n  new Promise((resolve, reject) => {\n    const sentiment = formValues.sentiment;\n\n    instance\n      .post(`/tweets/sentiment`, sentiment)\n      .then((result) => {\n        const sentiment = result.data;\n        console.log('RESULT.DATA', sentiment);\n        resolve(sentiment);\n      })\n      .catch(reject);\n  });\n\nexport { getTweets, getSentiment, generateTweet };\n","import React from 'react';\nimport { useForm } from '../hooks';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport { getTweets } from '../services/twitter';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '20ch',\n    },\n  },\n}));\n\nexport default function BasicTextFields(props) {\n  const classes = useStyles();\n  const { formValues, getInputProps } = useForm();\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(formValues);\n    getTweets(formValues).then((response) => {\n      console.log(response);\n      props.loadTweets(response);\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={classes.root} noValidate autoComplete=\"off\">\n      <TextField id=\"standard-basic\" label=\"Max tweets\" {...getInputProps('maxTweets')} />\n      <TextField id=\"standard-basic\" label=\"Topic\" {...getInputProps('query')} />\n      <TextField id=\"standard-basic\" label=\"Language\" {...getInputProps('lang')} />\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        API call\n      </Button>\n    </form>\n  );\n}\n","import React from 'react';\nimport { useForm } from '../hooks';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport { getSentiment } from '../services/twitter';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '20ch',\n    },\n  },\n}));\n\nexport default function BasicTextFields(props) {\n  const classes = useStyles();\n  const { formValues, getInputProps } = useForm();\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    getSentiment(formValues).then((response) => {\n      props.loadSentiment(response);\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={classes.root} noValidate autoComplete=\"off\">\n      <TextField\n        id=\"standard-multiline-flexible\"\n        label=\"Type or paste a tweet\"\n        multiline\n        rowsMax={4}\n        {...getInputProps('sentiment')}\n      />\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        Analyse text\n      </Button>\n    </form>\n  );\n}\n","import React from 'react';\nimport { useForm } from '../hooks';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport { generateTweet } from '../services/twitter';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '20ch',\n    },\n  },\n}));\n\nexport default function BasicTextFields(props) {\n  const classes = useStyles();\n  const { formValues, getInputProps } = useForm();\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(formValues);\n    generateTweet(formValues).then((response) => {\n      console.log('BACKEND RESPONSE', response);\n      props.loadGenerated(response);\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={classes.root} noValidate autoComplete=\"off\">\n      <TextField id=\"standard-basic\" label=\"Start word/s (spanish)\" {...getInputProps('start')} />\n      <TextField id=\"standard-basic\" label=\"Tweet length\" {...getInputProps('length')} />\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        Generate tweet\n      </Button>\n    </form>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n}));\n\nexport default function SimpleAccordion() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1a-content\"\n          id=\"panel1a-header\"\n        >\n          <Typography className={classes.heading}>Model summary </Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <div>\n            <p>\n              Follow this{' '}\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://github.com/soniameller/twitter-scrape-project\"\n              >\n                link\n              </a>{' '}\n              to access the repository\n            </p>\n            <img\n              style={{ maxWidth: '600px' }}\n              src=\"https://i.imgur.com/MSPe7YQ.png\"\n              alt=\"\"\n              srcSet=\"\"\n            />\n\n            <img\n              style={{ maxWidth: '600px' }}\n              src=\"https://i.imgur.com/CphPrlA.png\"\n              alt=\"\"\n              srcSet=\"\"\n            />\n          </div>\n        </AccordionDetails>\n      </Accordion>\n    </div>\n  );\n}\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\n\nexport default function Tweet(props) {\n  return (\n    <div>\n      <Grid container>\n        <Grid item>\n          <img width={50} src=\"https://i.imgur.com/kMpTYcW.png\" alt=\"\" srcSet=\"\" />\n        </Grid>\n        <Grid item xs={6}>\n          <p>\n            <b>{props.title}</b> <span className=\"disabeled\">{props.at}</span>\n          </p>\n          <Box bgcolor=\"white\" p=\"1em\" borderRadius={10}>\n            {props.tweet}\n            <Box className=\"tweet__icons\" display=\"flex\" justifyContent=\"space-between\" mt=\"1em\">\n              <img src=\"https://i.imgur.com/7oSRT2e.png\" alt=\"\" srcSet=\"\" />\n              <img src=\"https://i.imgur.com/8I4KovX.png\" alt=\"\" srcSet=\"\" />\n              <img src=\"https://i.imgur.com/BcS7UiY.png\" alt=\"\" srcSet=\"\" />\n              <img src=\"https://i.imgur.com/KX2qzxw.png\" alt=\"\" srcSet=\"\" />\n            </Box>\n          </Box>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\n\nexport default function TopTweet(props) {\n  return (\n    <div>\n      <Grid container>\n        <Grid item>\n          <img width={50} src=\"https://i.imgur.com/kMpTYcW.png\" alt=\"\" srcSet=\"\" />\n        </Grid>\n        <Grid item xs={6}>\n          <p>\n            <b>{props.tweet.name}</b> <span className=\"disabeled\">@{props.tweet.screen_name}</span>\n          </p>\n          <Box bgcolor=\"white\" p=\"1em\" borderRadius={10}>\n            {props.tweet.text}\n            <Box className=\"tweet__icons\" display=\"flex\" justifyContent=\"space-between\" mt=\"1em\">\n              <img src=\"https://i.imgur.com/7oSRT2e.png\" alt=\"\" srcSet=\"\" />\n              <div>\n                <img src=\"https://i.imgur.com/8I4KovX.png\" alt=\"\" srcSet=\"\" />{' '}\n                <small className=\"disabeled\">{props.tweet.retweeted_count}</small>\n              </div>\n              <div>\n                <img src=\"https://i.imgur.com/BcS7UiY.png\" alt=\"\" srcSet=\"\" />\n                <small className=\"disabeled\">{props.tweet.favorite_count}</small>\n              </div>\n              <img src=\"https://i.imgur.com/KX2qzxw.png\" alt=\"\" srcSet=\"\" />\n            </Box>\n          </Box>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport ReactWordcloud from 'react-wordcloud';\nimport { Resizable } from 're-resizable';\n// -- Tested wordcloud with fake data 👇🏼--\n// import words from './../data/words';\n\nconst resizeStyle = {\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  // border: 'solid 1px #ddd',\n  // background: '#f0f0f0',\n};\n\nconst options = {\n  // Blues\n  colors: ['#20a1f1d4', '#3f51b5bf', '#70c9f7c9', '#00bcd49e'],\n  // Purples\n  // colors: ['#3f51b5;', '#9a71c2', '#9bb57e', '#506953', '#614879', '#bd65c1', '#009688'],\n  enableTooltip: true,\n  deterministic: false,\n  fontFamily: [\n    '-apple-system',\n    'BlinkMacSystemFont',\n    '\"Segoe UI\"',\n    'Roboto',\n    '\"Helvetica Neue\"',\n    'Arial',\n    'sans-serif',\n    '\"Apple Color Emoji\"',\n    '\"Segoe UI Emoji\"',\n    '\"Segoe UI Symbol\"',\n  ].join(','),\n  fontSizes: [5, 80],\n  fontStyle: 'normal',\n  fontWeight: 'normal',\n  padding: 1,\n  rotations: 3,\n  rotationAngles: [0, 90],\n  scale: 'sqrt',\n  spiral: 'archimedean',\n  transitionDuration: 1000,\n};\n\nexport default class WordCloud extends Component {\n  render() {\n    return (\n      <div style={{ margin: '4em' }}>\n        <Resizable\n          defaultSize={{\n            width: 700,\n            height: 350,\n          }}\n          style={resizeStyle}\n        >\n          <div style={{ width: '100%', height: '100%' }}>\n            <ReactWordcloud options={options} words={this.props.wordFreq} />\n          </div>\n        </Resizable>\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<WordCloud />, rootElement);\n","import React, { Component } from 'react';\nimport Chart from 'chart.js';\nimport { Box } from '@material-ui/core';\n\nexport default class BarChart extends Component {\n  chartRef = React.createRef();\n\n  componentDidUpdate() {\n    this.drawChart();\n  }\n\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  drawChart() {\n    const negative = this.props.wordSentiment.neg;\n    const positive = this.props.wordSentiment.pos;\n    const compound = this.props.wordSentiment.compound;\n    const neutral = this.props.wordSentiment.neu;\n\n    const myChartRef = this.chartRef.current.getContext('2d');\n\n    new Chart(myChartRef, {\n      type: 'bar',\n      // data: {\n      //   labels: ['Negative', 'Positive'],\n      //   datasets: [\n      //     {\n      //       label: '',\n      //       data: [negative, positive],\n      //       backgroundColor: ['#20a1f1d4', '#3f51b5bf'],\n      //     },\n      //   ],\n      // },\n      data: {\n        //Bring in data\n        labels: ['Negative', 'Neutral', 'Positive', 'Compound'],\n        datasets: [\n          {\n            label: '',\n            data: [negative, neutral, positive, compound],\n            backgroundColor: ['#20a1f1d4', '#3f51b5bf', '#70c9f7c9', '#00bcd49e'],\n          },\n        ],\n      },\n    });\n  }\n\n  render() {\n    return (\n      <Box width=\"30vw\">\n        <canvas id=\"myChart\" width=\"400\" height=\"400\" ref={this.chartRef}></canvas>\n      </Box>\n    );\n  }\n}\n","import React, { Component, Fragment } from 'react';\nimport TweetInput from './components/TweetInput';\nimport SentimentInput from './components/SentimentInput';\nimport TweetGenInput from './components/TweetGenInput';\nimport Code from './components/Code';\nimport Tweet from './components/Tweet';\nimport TopTweet from './components/TopTweet';\n\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport WordCloud from './components/WordCloud';\nimport BarChart from './components/BarChart';\nimport Box from '@material-ui/core/Box';\n\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tweets: null,\n      sentiment: null,\n      generated: null,\n    };\n  }\n  loadTweets = (tweets) => {\n    this.setState({ tweets });\n  };\n\n  loadSentiment = (sentiment) => {\n    this.setState({ sentiment });\n  };\n\n  loadGenerated = (generated) => {\n    this.setState({ generated: generated.tweet });\n  };\n\n  render() {\n    return (\n      <div>\n        <Container fixed>\n          <h1>Flask API </h1>\n          <h2>Tweet analysis and generation </h2>\n\n          <Box bgcolor=\"#f5eeee\" p=\"5em\" mt=\"1em\">\n            <h3>Scrape twitter</h3>\n            <h5>Data Collection</h5>\n            <p>\n              <Link href=\"https://www.tweepy.org/\" target=\"_blank\" rel=\"noopener\">\n                Tweepy{' '}\n              </Link>\n              library has been used to get tweets by defining maximum amount of tweets, topic and\n              language\n            </p>\n            <TweetInput loadTweets={this.loadTweets} />\n            {this.state.tweets ? (\n              <Fragment>\n                <h4 mt=\"3em\">Top 3 tweets</h4>\n                {this.state.tweets.top_tweets.map((tweet, i) => {\n                  return <TopTweet key={i} tweet={tweet}></TopTweet>;\n                })}\n                <h4 mt=\"3em\">Word frequency</h4>\n                <WordCloud wordFreq={this.state.tweets.word_freq}></WordCloud>\n              </Fragment>\n            ) : (\n              ''\n            )}\n          </Box>\n          <Box bgcolor=\"#f5eeee\" p=\"5em\" mt=\"1em\">\n            <h3>Sentiment Analysis</h3>\n            <p>\n              {' '}\n              <Link\n                href=\"https://www.nltk.org/_modules/nltk/sentiment/vader.html\"\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                NLTK Vader model{' '}\n              </Link>{' '}\n              has been applyed to analyse your tweet input sentiment\n            </p>\n            <SentimentInput loadSentiment={this.loadSentiment} />\n\n            {this.state.sentiment ? (\n              <div>\n                {' '}\n                <BarChart wordSentiment={this.state.sentiment}></BarChart>\n                <small>\n                  <p>\n                    {'* The '}\n                    <strong>Compound score</strong>{' '}\n                    {\n                      'is a metric that calculates the sum of all the lexicon ratings which have been normalized between -1(most extreme negative) and +1 (most extreme positive).'\n                    }\n                  </p>\n                  <p>{'positive sentiment : (compound score >= 0.05)'}</p>\n                  <p>\n                    {'neutral sentiment : (compound score > -0.05) and (compound score < 0.05)'}\n                  </p>\n                  <p>{'negative sentiment : (compound score <= -0.05)'}</p>\n                </small>\n              </div>\n            ) : (\n              ''\n            )}\n          </Box>\n          <Box bgcolor=\"#f5eeee\" p=\"5em\" mt=\"1em\">\n            <h3>Tweet generation</h3>\n            <p>\n              A model has been trained with the query <b>'todes'</b> in spanish\n            </p>\n            <TweetGenInput loadGenerated={this.loadGenerated} />\n            {this.state.generated ? (\n              <Box mt=\"2em\">\n                <Tweet tweet={this.state.generated} title=\"The model\" at=\"@todes . now\"></Tweet>\n              </Box>\n            ) : (\n              ''\n            )}\n          </Box>\n\n          <Code />\n          <Box bgcolor=\"#f5eeee\" p=\"5em\" mt=\"1em\">\n            <h3>Name entity recognition</h3>\n            <p>\n              Under construction{' '}\n              <span role=\"img\" aria-label=\"Construction\">\n                {' '}\n                👷🏽‍♀️ 🚧\n              </span>\n            </p>\n          </Box>\n          <p>\n            Flask API{' '}\n            <Link\n              href=\"https://github.com/soniameller/flask-twitter-api\"\n              target=\"_blank\"\n              rel=\"noopener\"\n            >\n              repository{' '}\n            </Link>\n            | React frontend{' '}\n            <Link\n              href=\"https://github.com/soniameller/twitter-front\"\n              target=\"_blank\"\n              rel=\"noopener\"\n            >\n              repository\n            </Link>\n          </p>\n        </Container>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}