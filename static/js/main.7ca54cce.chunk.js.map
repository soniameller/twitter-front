{"version":3,"sources":["components/Input.jsx","services/twitter.js","hooks.js","components/Code.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","axios","create","baseURL","makeStyles","theme","root","margin","spacing","width","BasicTextFields","props","classes","initialValues","useState","formValues","setFormValues","handleChange","event","console","log","value","target","type","checked","name","getInputProps","fieldName","onChange","useForm","onSubmit","preventDefault","Promise","resolve","reject","text","then","response","loadTweets","className","noValidate","autoComplete","TextField","id","label","Button","variant","color","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","SimpleAccordion","Accordion","AccordionSummary","expandIcon","aria-controls","Typography","AccordionDetails","App","tweets","setState","state","Container","fixed","Link","href","rel","style","height","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7ca54cce.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useForm } from './../hooks';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport { getTweets } from './../services/twitter';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '20ch',\n    },\n  },\n}));\n\nexport default function BasicTextFields(props) {\n  const classes = useStyles();\n  const { formValues, setFormValues, getInputProps } = useForm();\n\n  const handleSubmit = (event) => {\n    console.log('SUBMITTED!!');\n    event.preventDefault();\n\n    console.log('FORM VALUES', formValues);\n    getTweets(formValues).then((response) => {\n      props.loadTweets(response);\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={classes.root} noValidate autoComplete=\"off\">\n      <TextField id=\"standard-basic\" label=\"Max tweets\" {...getInputProps('maxTweets')} />\n      <TextField id=\"standard-basic\" label=\"Topic\" {...getInputProps('query')} />\n      <TextField id=\"standard-basic\" label=\"Language\" {...getInputProps('lang')} />\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        API call\n      </Button>\n    </form>\n  );\n}\n","import axios from 'axios';\nimport { text } from './../data/todes.json';\n\nconst instance = axios.create({\n  baseURL: '/api/authentication',\n});\n\nconst getTweets = (data) =>\n  new Promise((resolve, reject) => {\n    resolve(text);\n    // instance\n    //   .post('/tweets', data)\n    //   .then((result) => {\n    //     const user = result.data.user;\n    //     resolve(user);\n    //   })\n    //   .catch(reject);\n  });\n\nexport { getTweets };\n","import { useState } from 'react';\n\n/* \n\n// ----- Custom Hook useForm -----\n\n// You can use this custom Hook in a component\n\n// To initialize, you have to write the following\nconst initialValues = { carrot: \"orange\"  }\nconst { formValues, getInputProps, handleChange } = useForm(initialValues)\n\n// - formValues: an object with all the values of a from\n// - getInputProps: a function to get the props of an input\n// - handleChange: the handler function for forms (optional most of the time)\n// - initialValue: the initial for formValues\n\n// Then to insert a <input>, <textarea> or <select>, it's really easy!\n<input type=\"text\" {...getInputProps('carrot')} />\n<select {...getInputProps('lang')}>\n  <option value=\"fr\">French</option>\n  <option value=\"en\">English</option>\n</select>\n\n// Then you can access the values typed very easily:\nformValues.carrot\nformValues.lang\n\n// You can see an example in: client/src/components/pages/Login.jsx\n\n*/\nexport function useForm(initialValues = {}) {\n  const [formValues, setFormValues] = useState(initialValues);\n\n  function handleChange(event) {\n    console.log('triggered!');\n    let value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\n    setFormValues({\n      ...formValues,\n      [event.target.name]: value,\n    });\n  }\n\n  function getInputProps(fieldName) {\n    return {\n      name: fieldName,\n      value: formValues[fieldName] || '',\n      checked: formValues[fieldName] || false,\n      onChange: handleChange,\n    };\n  }\n\n  return {\n    formValues,\n    getInputProps,\n    handleChange,\n    setFormValues,\n  };\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n}));\n\nexport default function SimpleAccordion() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1a-content\"\n          id=\"panel1a-header\"\n        >\n          <Typography className={classes.heading}>See code snippet</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <code>\n            auth = tweepy.AppAuthHandler(consumer_key, consumer_secret) api = tweepy.API(auth,\n            wait_on_rate_limit=True,wait_on_rate_limit_notify=True)\n          </code>\n        </AccordionDetails>\n      </Accordion>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Input from './components/Input';\nimport Code from './components/Code';\n\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tweets: '',\n    };\n  }\n  loadTweets = (tweets) => {\n    this.setState({ tweets });\n  };\n\n  render() {\n    return (\n      <div>\n        <Container fixed>\n          <h1>Tweet analysis and generation </h1>\n          <h2>Data Collection</h2>\n          <p>\n            <Link href=\"https://www.tweepy.org/\" target=\"_blank\" rel=\"noopener\">\n              This library{' '}\n            </Link>\n            has been used to get tweets by defining maximum amount of tweets, topic and language\n          </p>\n          <Code />\n          {/* TODO - Solve this space some other way! */}\n          <div style={{ height: '100px' }}></div>\n          <h4>Scrape twitter</h4>\n          <Input loadTweets={this.loadTweets} />\n          <div>{this.state.tweets}</div>\n        </Container>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}